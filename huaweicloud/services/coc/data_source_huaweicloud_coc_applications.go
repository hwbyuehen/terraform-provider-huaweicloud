// Generated by PMS #622
package coc

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCocApplications() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCocApplicationsRead,

		Schema: map[string]*schema.Schema{
			"id_list": {
				Type:        schema.TypeList,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Id list`,
			},
			"parent_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Parent application id`,
			},
			"name_like": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Fuzzy query the application name`,
			},
			"code": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Application code`,
			},
			"data": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Application list`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"code": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Application code`,
						},
						"domain_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Domain id`,
						},
						"parent_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Parent application id`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Application description`,
						},
						"path": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Application path`,
						},
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Application id`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Application name`,
						},
						"is_collection": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `是否为收藏应用`,
						},
						"update_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `修改时间`,
						},
						"create_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `创建时间`,
						},
					},
				},
			},
		},
	}
}

type ApplicationsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newApplicationsDSWrapper(d *schema.ResourceData, meta interface{}) *ApplicationsDSWrapper {
	return &ApplicationsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCocApplicationsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newApplicationsDSWrapper(d, meta)
	listApplicationsRst, err := wrapper.ListApplications()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listApplicationsToSchema(listApplicationsRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API COC GET /v1/applications
func (w *ApplicationsDSWrapper) ListApplications() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "coc")
	if err != nil {
		return nil, err
	}

	uri := "/v1/applications"
	params := map[string]any{
		"id_list":   w.ListToArray("id_list"),
		"parent_id": w.Get("parent_id"),
		"name_like": w.Get("name_like"),
		"code":      w.Get("code"),
		"limit":     100,
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		MarkerPager("data", "data[-1].id", "marker").
		Request().
		Result()
}

func (w *ApplicationsDSWrapper) listApplicationsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("data", schemas.SliceToList(body.Get("data"),
			func(data gjson.Result) any {
				return map[string]any{
					"code":          data.Get("code").Value(),
					"domain_id":     data.Get("domain_id").Value(),
					"parent_id":     data.Get("parent_id").Value(),
					"description":   data.Get("description").Value(),
					"path":          data.Get("path").Value(),
					"id":            data.Get("id").Value(),
					"name":          data.Get("name").Value(),
					"is_collection": data.Get("is_collection").Value(),
					"update_time":   data.Get("update_time").Value(),
					"create_time":   data.Get("create_time").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
